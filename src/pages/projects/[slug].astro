---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';

export async function getStaticPaths() {
  const projects = await getCollection('projects');
  return projects.map((project) => ({
    params: { slug: project.id },
    props: { project },
  }));
}

const { project } = Astro.props;

const title = project.data.title;
const description = project.data.description;
const permalink = `${Astro.site.href}projects/${project.id}`;
---

<BaseLayout title={title} description={description} permalink={permalink} current="projects">
  <div class="container">
    <nav class="breadcrumb">
      <a href="/projects">← Back to Projects</a>
    </nav>

    <article class="project-detail">
      <header class="project-header">
        <h1 class="project-title">{project.data.title}</h1>
        
        <div class="project-meta">
          <div class="meta-item">
            <span class="meta-label">Year:</span>
            <span class="meta-value">{project.data.year}</span>
          </div>
          <div class="meta-item">
            <span class="meta-label">Type:</span>
            <span class="meta-value">{project.data.type}</span>
          </div>
          <div class="meta-item">
            <span class="meta-label">Status:</span>
            <span class={`meta-value status-${project.data.status.toLowerCase()}`}>
              {project.data.status}
            </span>
          </div>
        </div>

        <div class="project-tags">
          {project.data.tags.map((tag) => (
            <span class="tag">{tag}</span>
          ))}
        </div>
      </header>

      <div class="project-content">
        <div set:html={project.rendered?.html} />
      </div>

      {project.data.links && project.data.links.length > 0 && (
        <footer class="project-links">
          <h3>Links & Resources</h3>
          <div class="links-grid">
            {project.data.links.map((link) => (
              <a 
                href={link.url} 
                class="project-link"
                target={link.url.startsWith('http') ? '_blank' : undefined}
                rel={link.url.startsWith('http') ? 'noopener' : undefined}
              >
                <span class="link-name">{link.name}</span>
                {link.url.startsWith('http') && (
                  <span class="link-icon">↗</span>
                )}
              </a>
            ))}
          </div>
        </footer>
      )}
    </article>
  </div>
</BaseLayout>

<style>
  .breadcrumb {
    margin-bottom: 2rem;
  }

  .breadcrumb a {
    color: var(--text-secondary);
    text-decoration: none;
    font-weight: 500;
  }

  .breadcrumb a:hover {
    color: var(--accent-color);
  }

  .project-detail {
    max-width: 800px;
  }

  .project-header {
    margin-bottom: 2rem;
    padding-bottom: 1.5rem;
    border-bottom: 1px solid var(--border-color);
  }

  .project-title {
    font-size: 2rem;
    margin: 0 0 1rem 0;
    line-height: 1.2;
  }

  .project-meta {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .meta-item {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .meta-label {
    font-size: 0.875rem;
    color: var(--text-secondary);
    font-weight: 500;
  }

  .meta-value {
    font-weight: 600;
    color: var(--text-primary);
  }

  .status-published {
    color: var(--success-text);
  }

  .status-unpublished {
    color: var(--warning-text);
  }

  .project-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .tag {
    background: var(--tag-bg);
    color: var(--tag-text);
    padding: 0.375rem 0.75rem;
    border-radius: 6px;
    font-size: 0.875rem;
    font-weight: 500;
  }

  .project-content {
    margin-bottom: 3rem;
    line-height: 1.7;
  }

  .project-content h2 {
    font-size: 1.5rem;
    margin: 2rem 0 1rem 0;
    color: var(--text-primary);
  }

  .project-content h3 {
    font-size: 1.25rem;
    margin: 1.5rem 0 0.75rem 0;
    color: var(--text-primary);
  }

  .project-content p {
    margin-bottom: 1rem;
    color: var(--text-secondary);
    font-size: 0.9rem !important;
  }

  .project-content ul, .project-content ol {
    margin-bottom: 1rem;
    padding-left: 1.5rem;
  }

  .project-content li {
    margin-bottom: 0.5rem;
    color: var(--text-secondary);
  }

  .project-links {
    background: var(--card-bg);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 1.5rem;
  }

  .project-links h3 {
    margin: 0 0 1rem 0;
    font-size: 1.25rem;
  }

  .links-grid {
    display: grid;
    gap: 0.75rem;
  }

  .project-link {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0.75rem 1rem;
    background: var(--bg-primary);
    border: 1px solid var(--border-color);
    border-radius: 6px;
    text-decoration: none;
    color: var(--text-primary);
    transition: all 0.2s ease;
  }

  .project-link:hover {
    background: var(--accent-bg);
    border-color: var(--accent-color);
    transform: translateY(-1px);
  }

  .link-name {
    font-weight: 500;
  }

  .link-icon {
    color: var(--accent-color);
    font-weight: bold;
  }

  @media (max-width: 768px) {
    .project-title {
      font-size: 1.75rem;
    }

    .project-meta {
      grid-template-columns: 1fr;
    }

    .project-content {
      margin-bottom: 2rem;
    }
  }
</style>
