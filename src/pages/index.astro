---
import BaseLayout from '../layouts/BaseLayout.astro';

const title = 'Solim LeGris';
const description = 'The perfect starter for your perfect blog.';
const permalink = Astro.site.href;
---

<BaseLayout title={title} description={description} permalink={permalink}>
  <div class="home-container">
    <div class="home-copy">
      <h1>Solim LeGris</h1>
      <div class="social-links">
        <a href="https://github.com/le-gris" target="_blank" rel="noopener noreferrer" class="social-link" title="GitHub">
          <svg width="8" height="8" viewBox="0 0 24 24" fill="currentColor">
            <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
          </svg>
        </a>
        <a href="https://linkedin.com/in/solim-legris" target="_blank" rel="noopener noreferrer" class="social-link" title="LinkedIn">
          <svg width="8" height="8" viewBox="0 0 24 24" fill="currentColor">
            <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
          </svg>
        </a>
        <a href="https://bsky.app/profile/solimlegris.bsky.social" target="_blank" rel="noopener noreferrer" class="social-link" title="Bluesky">
          <svg width="8" height="8" viewBox="0 0 24 24" fill="currentColor">
            <path d="M12 10.8c-1.087-2.114-4.046-6.053-6.798-6.547.692-.324 1.4-.54 2.12-.64 2.4-.2 4.8.4 6.8 1.6 2-1.2 4.4-1.8 6.8-1.6.72.1 1.428.316 2.12.64-2.752.494-5.711 4.433-6.798 6.547zM2.4 10.8c0 1.2.2 2.4.6 3.4.4 1 1 1.8 1.8 2.4.8.6 1.8 1 2.8 1.2 1 .2 2 .2 3 0 1-.2 2-.6 2.8-1.2.8-.6 1.4-1.4 1.8-2.4.4-1 .6-2.2.6-3.4 0-1.2-.2-2.4-.6-3.4-.4-1-1-1.8-1.8-2.4-.8-.6-1.8-1-2.8-1.2-1-.2-2-.2-3 0-1 .2-2 .6-2.8 1.2-.8.6-1.4 1.4-1.8 2.4-.4 1-.6 2.2-.6 3.4z"/>
          </svg>
        </a>
      </div>
    </div>
    <div class="generative-art-container">
      <canvas id="generative-canvas"></canvas>
      <p class="canvas-caption">
        I briefly had a fascination with <a href="https://avantarte.com/insights/guides/what-is-generative-art" target="_blank" rel="noopener noreferrer">algorithmic art</a>...but I actually spend most of my time as a scientist.
      </p>
    </div>
  </div>
</BaseLayout>

<style>
  .home-container {
    align-items: center;
    display: flex;
    flex: 1;
    justify-content: space-between;
    margin: 2em 0;
    height: 80vh;
    position: relative;
    gap: 2em;
  }

  .home-copy {
    flex: 0 0 40%;
    padding: 0 1em;
    z-index: 2;
  }

  .home-copy h1 {
    font-weight: 700;
    margin-bottom: 0.5em;
    line-height: 1.3;
  }

  .home-copy p {
    font-size: 1.4em;
  }

  .social-links {
    display: flex;
    gap: 0.8em;
    margin-top: 1em;
  }

  .social-link {
    color: #333;
    text-decoration: none;
    padding: 0.6em;
    border: 2px solid #333;
    border-radius: 50%;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 44px;
    height: 44px;
  }

  .social-link:hover {
    background-color: #333;
    color: white;
    transform: translateY(-2px);
  }

  .social-link svg {
    width: 20px;
    height: 20px;
  }

  .generative-art-container {
    flex: 0 0 65%;
    height: 100%;
    pointer-events: none;
    z-index: 1;
    display: flex;
    flex-direction: column;
  }

  #generative-canvas {
    width: 100%;
    flex: 1;
    opacity: 0.4;
    background: rgba(248, 249, 250, 0.3);
    border: 1px solid rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    pointer-events: auto;
  }

  .canvas-caption {
    font-size: 0.9em;
    color: #666;
    text-align: center;
    margin-top: 0.5em;
    font-style: italic;
    pointer-events: auto;
  }

  @media (max-width: 1200px) {
    p {
      font-size: 1.2em;
    }
  }

  @media (max-width: 800px) {
    .home-container {
      flex-direction: column;
    }

    .home-copy {
      flex: 0;
      padding-bottom: 2em;
      text-align: center;
    }

    .social-links {
      justify-content: center;
      flex-wrap: wrap;
      gap: 0.6em;
    }

    .social-link {
      width: 40px;
      height: 40px;
      padding: 0.5em;
    }

    .social-link svg {
      width: 18px;
      height: 18px;
    }
  }
</style>

<script>
  const canvas = document.getElementById('generative-canvas') as HTMLCanvasElement;
  const ctx = canvas.getContext('2d');
  
  let mouseX = 0;
  let mouseY = 0;
  let time = 0;
  let particles = [];
  
  // Resize canvas to match container
  function resizeCanvas() {
    const container = canvas.parentElement;
    const rect = container.getBoundingClientRect();
    canvas.width = rect.width;
    canvas.height = rect.height;
  }
  
  // Initialize particles with mathematical distribution
  function initParticles() {
    particles = [];
    const numParticles = 250;
    
    for (let i = 0; i < numParticles; i++) {
      const angle = (i / numParticles) * Math.PI * 2;
      const radius = 150 + Math.sin(angle * 3) * 60;
      
      particles.push({
        x: canvas.width / 2 + Math.cos(angle) * radius,
        y: canvas.height / 2 + Math.sin(angle) * radius,
        baseX: canvas.width / 2 + Math.cos(angle) * radius,
        baseY: canvas.height / 2 + Math.sin(angle) * radius,
        angle: angle,
        radius: radius,
        phase: Math.random() * Math.PI * 2,
        speed: 0.01 + Math.random() * 0.01,
        size: 1 + Math.sin(angle * 2) * 0.5
      });
    }
  }
  
  function updateParticles() {
    time += 0.01;
    
    particles.forEach((particle, index) => {
      // Base circular motion with mathematical variation
      particle.angle += particle.speed;
      
      // Add wave motion based on mathematical functions
      const wave1 = Math.sin(particle.angle * 2 + time) * 45;
      const wave2 = Math.cos(particle.angle * 3 + time * 1.5) * 25;
      const wave3 = Math.sin(particle.phase + time * 2) * 15;
      
      // Mouse attraction with smooth falloff
      const dx = mouseX - particle.baseX;
      const dy = mouseY - particle.baseY;
      const distance = Math.sqrt(dx * dx + dy * dy);
      const maxDistance = 200;
      
      let mouseInfluence = 0;
      if (distance < maxDistance) {
        mouseInfluence = (1 - distance / maxDistance) * 60;
      }
      
      // Calculate final position
      particle.x = particle.baseX + 
        Math.cos(particle.angle) * (particle.radius + wave1 + wave2 + wave3) +
        dx * mouseInfluence * 0.01;
      particle.y = particle.baseY + 
        Math.sin(particle.angle) * (particle.radius + wave1 + wave2 + wave3) +
        dy * mouseInfluence * 0.01;
    });
  }
  
  function drawParticles() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // Draw connections between nearby particles
    for (let i = 0; i < particles.length; i++) {
      for (let j = i + 1; j < particles.length; j++) {
        const dx = particles[i].x - particles[j].x;
        const dy = particles[i].y - particles[j].y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        if (distance < 150) {
          const opacity = (1 - distance / 150) * 0.3;
          ctx.beginPath();
          ctx.moveTo(particles[i].x, particles[i].y);
          ctx.lineTo(particles[j].x, particles[j].y);
          ctx.strokeStyle = `rgba(0, 0, 0, ${opacity})`;
          ctx.lineWidth = 0.5;
          ctx.stroke();
        }
      }
    }
    
    // Draw particles
    particles.forEach(particle => {
      ctx.beginPath();
      ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
      ctx.fillStyle = '#000';
      ctx.fill();
    });
  }
  
  function animate() {
    updateParticles();
    drawParticles();
    requestAnimationFrame(animate);
  }
  
  // Check if animation is running
  let animationRunning = false;
  function startAnimation() {
    if (!animationRunning) {
      console.log('Starting animation...');
      animationRunning = true;
      animate();
    }
  }
  
  // Mouse tracking
  canvas.addEventListener('mousemove', (e) => {
    const rect = canvas.getBoundingClientRect();
    mouseX = e.clientX - rect.left;
    mouseY = e.clientY - rect.top;
  });
  
  // Handle resize
  window.addEventListener('resize', () => {
    resizeCanvas();
    initParticles();
  });
  
  // Initialize
  console.log('Initializing animation...');
  resizeCanvas();
  initParticles();
  startAnimation();
</script>
